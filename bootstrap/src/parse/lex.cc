/* Generated by re2c 1.3 on Fri Apr 17 07:28:20 2020 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <algorithm>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/output.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) fatal("unexpected end of input"); } while(0)

#line 61 "../src/parse/lex.re"


#line 120 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo(Output &out)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;
    if (is_eof()) return Stop;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 59 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 225 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return Stop;
        }
        goto loop;
    }
#line 125 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 245 "../src/parse/lex.re"
	{ goto loop; }
#line 131 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 240 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 145 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 135 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 193 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 's':	goto yy27;
	case 't':	goto yy28;
	case 'u':	goto yy29;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy30;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy33;
	if (yych == 'n') goto yy34;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy35;
	if (yych == 't') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy39;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy40;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy41;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy42;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy43;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy44;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy45;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy46;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy47;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy48;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy49;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy50;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy52;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy55;
	if (yych <= '9') goto yy13;
	goto yy55;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy57;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy60;
	if (yych == 'n') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy63;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy64;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy65;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy66;
	goto yy13;
yy54:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy55:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy54;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy54;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy67;
		}
		goto yy13;
	}
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy69;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy71;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy72;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy74;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy75;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy76;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy77;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy78;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy79;
	goto yy13;
yy67:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy67;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy80;
		if (yych <= '\n') goto yy82;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy84;
		if (yych == ' ') goto yy80;
		goto yy13;
	}
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy85;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy88;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy89;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy90;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy91;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy92;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy93;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy94;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy95;
	goto yy13;
yy80:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy80;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy80;
		if (yych == '"') goto yy96;
		goto yy13;
	}
yy82:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 233 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_stmt_textraw(alc, ""));
        set_sourceline();
        goto next;
    }
#line 496 "src/parse/lex.cc"
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy98;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy101;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy102;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy103;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy104;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy105;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy106;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy107;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy108;
	goto yy13;
yy96:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy96;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy109;
	goto yy110;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy111;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy112;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy114;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy117;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy119;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	if (yych == '\r') goto yy84;
	goto yy13;
yy110:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy96;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy124;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy125;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy126;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy127;
	goto yy13;
yy115:
	++YYCURSOR;
#line 156 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxfill(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 636 "src/parse/lex.cc"
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy129;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy130;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy132;
	goto yy13;
yy122:
	++YYCURSOR;
#line 145 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Reuse;
    }
#line 664 "src/parse/lex.cc"
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy133;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy134;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy136;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy137;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy138;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy140;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy142;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy144;
	goto yy13;
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy146;
	goto yy13;
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy147;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy148;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy150;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy151;
	goto yy13;
yy138:
	++YYCURSOR;
#line 197 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto next;
    }
#line 729 "src/parse/lex.cc"
yy140:
	++YYCURSOR;
#line 140 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Rules;
    }
#line 737 "src/parse/lex.cc"
yy142:
	++YYCURSOR;
#line 191 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto next;
    }
#line 746 "src/parse/lex.cc"
yy144:
	++YYCURSOR;
#line 180 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(opts->topIndent, code_cond_enum(alc));
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 760 "src/parse/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy152;
	goto yy13;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy153;
	goto yy13;
yy148:
	++YYCURSOR;
#line 150 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto next;
    }
#line 777 "src/parse/lex.cc"
yy150:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy154;
	goto yy13;
yy151:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy155;
	goto yy13;
yy152:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy156;
	goto yy13;
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy158;
	goto yy13;
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '"') goto yy13;
	goto yy160;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy161;
	goto yy13;
yy156:
	++YYCURSOR;
#line 170 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (opts->fFlag && opts->target == TARGET_CODE && !out.state_goto) {
            out.wdelay_stmt(opts->topIndent, code_state_goto(alc));
            out.state_goto = true;
        }
        lex_end_of_comment(out);
        goto next;
    }
#line 814 "src/parse/lex.cc"
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy162;
	if (yych == 'n') goto yy163;
	goto yy13;
yy159:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy160:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy159;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy159;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy165;
		}
		goto yy13;
	}
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy167;
	goto yy13;
yy162:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy169;
	goto yy13;
yy163:
	++YYCURSOR;
#line 203 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        lex_end_of_comment(out);
        goto next;
    }
#line 854 "src/parse/lex.cc"
yy165:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy165;
	} else {
		if (yych <= '"') goto yy171;
		if (yych == '\\') goto yy172;
		goto yy165;
	}
yy167:
	++YYCURSOR;
#line 163 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxnmatch(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 877 "src/parse/lex.cc"
yy169:
	++YYCURSOR;
#line 211 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 888 "src/parse/lex.cc"
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy173;
		}
		goto yy13;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy173;
		}
		if (yych == '*') {
			yyt2 = YYCURSOR;
			goto yy175;
		}
		goto yy13;
	}
yy172:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy165;
yy173:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy173;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy173;
		if (yych != '*') goto yy13;
	}
yy175:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy13;
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 219 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 938 "src/parse/lex.cc"
}
#line 246 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment(Output &out)
{
    bool multiline = false;
loop:

#line 949 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy180;
		if (yych == '\n') goto yy184;
		goto yy182;
	} else {
		if (yych <= '\r') goto yy186;
		if (yych == '*') goto yy187;
		goto yy182;
	}
yy180:
	++YYCURSOR;
#line 255 "../src/parse/lex.re"
	{
        msg.fatal(cur_loc(), "expected end of block");
    }
#line 969 "src/parse/lex.cc"
yy182:
	++YYCURSOR;
yy183:
#line 254 "../src/parse/lex.re"
	{ goto loop; }
#line 975 "src/parse/lex.cc"
yy184:
	++YYCURSOR;
#line 258 "../src/parse/lex.re"
	{
        next_line();
        multiline = true;
        goto loop;
    }
#line 984 "src/parse/lex.cc"
yy186:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy184;
	goto yy183;
yy187:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy183;
	++YYCURSOR;
#line 263 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        }
        return;
    }
#line 1000 "src/parse/lex.cc"
}
#line 269 "../src/parse/lex.re"

}

void Scanner::lex_tags(Output &out, bool mtags)
{
    const opt_t *opts = out.block().opts;
    std::string fmt, sep;
loop:

#line 1012 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy194;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy197;
		} else {
			if (yych == '\r') goto yy199;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy200;
			if (yych >= 'f') goto yy201;
		} else {
			if (yych == 's') goto yy202;
		}
	}
	++YYCURSOR;
yy193:
#line 278 "../src/parse/lex.re"
	{
        msg.fatal(cur_loc(), "unrecognized configuration");
    }
#line 1074 "src/parse/lex.cc"
yy194:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy194;
	}
#line 289 "../src/parse/lex.re"
	{
        goto loop;
    }
#line 1086 "src/parse/lex.cc"
yy197:
	++YYCURSOR;
#line 292 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 1094 "src/parse/lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy197;
	goto yy193;
yy200:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy203;
	goto yy193;
yy201:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy205;
	goto yy193;
yy202:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy207;
	goto yy193;
yy203:
	++YYCURSOR;
#line 296 "../src/parse/lex.re"
	{
        if (opts->target == TARGET_CODE) {
            out.wdelay_stmt(opts->topIndent, code_tags(out.allocator, fmt, sep, mtags));
        }
        return;
    }
#line 1120 "src/parse/lex.cc"
yy205:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy208;
yy206:
	YYCURSOR = YYMARKER;
	goto yy193;
yy207:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy209;
	goto yy206;
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy210;
	goto yy206;
yy209:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy211;
	goto yy206;
yy210:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy212;
	goto yy206;
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy213;
	goto yy206;
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy214;
	goto yy206;
yy213:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy216;
	goto yy206;
yy214:
	++YYCURSOR;
#line 281 "../src/parse/lex.re"
	{
        fmt = lex_conf_string();
        goto loop;
    }
#line 1162 "src/parse/lex.cc"
yy216:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy206;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy206;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy206;
	++YYCURSOR;
#line 285 "../src/parse/lex.re"
	{
        sep = lex_conf_string();
        goto loop;
    }
#line 1176 "src/parse/lex.cc"
}
#line 302 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p;
scan:
    tok = cur;
    location = cur_loc();

#line 1189 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy225;
	}
	if (yych <= '9') {
		if (yych <= '%') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy223;
				if (yych <= '\n') goto yy228;
				if (yych >= '\r') goto yy230;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy231;
				} else {
					if (yych <= '#') goto yy233;
					if (yych <= '$') goto yy234;
					goto yy236;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') goto yy223;
				if (yych <= '\'') goto yy237;
				if (yych <= ')') goto yy234;
				goto yy239;
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy234;
				} else {
					if (yych <= '.') goto yy240;
					if (yych <= '/') goto yy242;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy243;
				if (yych <= ';') goto yy234;
				if (yych <= '<') goto yy244;
				goto yy246;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy234;
				} else {
					if (yych <= '@') goto yy233;
					if (yych <= 'Z') goto yy247;
					goto yy250;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy234;
				} else {
					if (yych != '`') goto yy247;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy252;
					goto yy247;
				} else {
					if (yych <= '{') goto yy253;
					if (yych <= '|') goto yy234;
				}
			}
		}
	}
yy223:
	++YYCURSOR;
yy224:
#line 426 "../src/parse/lex.re"
	{
        msg.fatal(tok_loc(), "unexpected character: '%c'", *tok);
        goto scan;
    }
#line 1304 "src/parse/lex.cc"
yy225:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy225;
	}
#line 408 "../src/parse/lex.re"
	{ goto scan; }
#line 1314 "src/parse/lex.cc"
yy228:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy255;
	} else {
		if (yych <= ' ') goto yy255;
		if (yych == '#') goto yy258;
	}
yy229:
#line 415 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1336 "src/parse/lex.cc"
yy230:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy228;
	goto yy224;
yy231:
	++YYCURSOR;
#line 328 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1345 "src/parse/lex.cc"
yy233:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy224;
		if (yych <= 'Z') goto yy260;
		goto yy224;
	} else {
		if (yych == '`') goto yy224;
		if (yych <= 'z') goto yy260;
		goto yy224;
	}
yy234:
	++YYCURSOR;
yy235:
#line 337 "../src/parse/lex.re"
	{ return *tok; }
#line 1362 "src/parse/lex.cc"
yy236:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy263;
	goto yy224;
yy237:
	++YYCURSOR;
#line 327 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1371 "src/parse/lex.cc"
yy239:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy263;
	goto yy235;
yy240:
	++YYCURSOR;
#line 403 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1383 "src/parse/lex.cc"
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy265;
	if (yych == '/') goto yy267;
	goto yy235;
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy269;
	goto yy224;
yy244:
	++YYCURSOR;
#line 320 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1397 "src/parse/lex.cc"
yy246:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy271;
	goto yy235;
yy247:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy248:
	if (yybm[0+yych] & 32) {
		goto yy247;
	}
#line 380 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1434 "src/parse/lex.cc"
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy273;
#line 329 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1440 "src/parse/lex.cc"
yy252:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy275;
	goto yy248;
yy253:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy278;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy276;
		if (yych >= 'A') goto yy280;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy280;
		} else {
			if (yych <= '`') goto yy254;
			if (yych <= 'z') goto yy280;
		}
	}
yy254:
#line 312 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1465 "src/parse/lex.cc"
yy255:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy255;
	} else {
		if (yych <= ' ') goto yy255;
		if (yych == '#') goto yy258;
	}
yy257:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy229;
			} else {
				goto yy235;
			}
		} else {
			goto yy254;
		}
	} else {
		if (yyaccept == 3) {
			goto yy270;
		} else {
			goto yy277;
		}
	}
yy258:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy258;
		goto yy257;
	} else {
		if (yych <= ' ') goto yy258;
		if (yych == 'l') goto yy282;
		goto yy257;
	}
yy260:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy262;
		if (yych <= '9') goto yy260;
		if (yych >= 'A') goto yy260;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy260;
		} else {
			if (yych <= '`') goto yy262;
			if (yych <= 'z') goto yy260;
		}
	}
yy262:
#line 332 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1529 "src/parse/lex.cc"
yy263:
	++YYCURSOR;
#line 325 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 1534 "src/parse/lex.cc"
yy265:
	++YYCURSOR;
#line 323 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1539 "src/parse/lex.cc"
yy267:
	++YYCURSOR;
#line 322 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1544 "src/parse/lex.cc"
yy269:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy271;
yy270:
#line 313 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1552 "src/parse/lex.cc"
yy271:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy257;
			goto yy271;
		} else {
			if (yych == ' ') goto yy271;
			goto yy257;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy283;
			}
			if (yych <= '^') goto yy257;
			yyt1 = YYCURSOR;
			goto yy283;
		} else {
			if (yych <= '`') goto yy257;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy283;
			}
			goto yy257;
		}
	}
yy273:
	++YYCURSOR;
#line 330 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1587 "src/parse/lex.cc"
yy275:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy286;
	goto yy248;
yy276:
	++YYCURSOR;
yy277:
#line 365 "../src/parse/lex.re"
	{
        msg.fatal(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
    }
#line 1600 "src/parse/lex.cc"
yy278:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy278;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy287;
	}
	if (yych == '}') goto yy288;
	goto yy257;
yy280:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy257;
			goto yy280;
		} else {
			if (yych <= '@') goto yy257;
			if (yych <= 'Z') goto yy280;
			goto yy257;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy257;
			goto yy280;
		} else {
			if (yych == '}') goto yy290;
			goto yy257;
		}
	}
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy292;
	goto yy257;
yy283:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy285;
		if (yych <= '9') goto yy283;
		if (yych >= 'A') goto yy283;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy283;
		} else {
			if (yych <= '`') goto yy285;
			if (yych <= 'z') goto yy283;
		}
	}
yy285:
	p = yyt1;
#line 315 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 1663 "src/parse/lex.cc"
yy286:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy293;
	goto yy248;
yy287:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy277;
	if (yych <= '9') goto yy294;
	if (yych == '}') goto yy296;
	goto yy277;
yy288:
	++YYCURSOR;
#line 339 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.fatal(tok_loc(), "repetition count overflow");
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1685 "src/parse/lex.cc"
yy290:
	++YYCURSOR;
#line 370 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.fatal(tok_loc(), "curly braces for names only allowed with -F switch");
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 1696 "src/parse/lex.cc"
yy292:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy298;
	goto yy257;
yy293:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy299;
	goto yy248;
yy294:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy257;
	if (yych <= '9') goto yy294;
	if (yych == '}') goto yy301;
	goto yy257;
yy296:
	++YYCURSOR;
#line 357 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.fatal(tok_loc(), "repetition lower bound overflow");
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1723 "src/parse/lex.cc"
yy298:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy303;
	goto yy257;
yy299:
	++YYCURSOR;
#line 378 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 1732 "src/parse/lex.cc"
yy301:
	++YYCURSOR;
	p = yyt1;
#line 347 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.fatal(tok_loc(), "repetition lower bound overflow");
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.fatal(tok_loc(), "repetition upper bound overflow");
        }
        return TOKEN_CLOSESIZE;
    }
#line 1746 "src/parse/lex.cc"
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy305;
	if (yych <= '9') goto yy257;
	goto yy305;
yy304:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy305:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy304;
		goto yy257;
	} else {
		if (yych <= ' ') goto yy304;
		if (yych <= '0') goto yy257;
		if (yych >= ':') goto yy257;
		yyt1 = YYCURSOR;
	}
yy306:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy257;
		} else {
			if (yych <= '\n') goto yy310;
			if (yych <= '\f') goto yy257;
			goto yy312;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy257;
		} else {
			if (yych <= '/') goto yy257;
			if (yych <= '9') goto yy306;
			goto yy257;
		}
	}
yy308:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy308;
		goto yy257;
	} else {
		if (yych <= ' ') goto yy308;
		if (yych == '"') goto yy313;
		goto yy257;
	}
yy310:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 410 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 1807 "src/parse/lex.cc"
yy312:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy310;
	goto yy257;
yy313:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy313;
	}
	if (yych <= '\n') goto yy257;
	if (yych >= '#') goto yy316;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy310;
	if (yych == '\r') goto yy312;
	goto yy257;
yy316:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy257;
	if (yych == '\n') goto yy257;
	goto yy313;
}
#line 430 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 1840 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy320;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy320;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy323;
		}
	}
yy319:
#line 437 "../src/parse/lex.re"
	{ return false; }
#line 1897 "src/parse/lex.cc"
yy320:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy320;
	}
	if (yych == '=') goto yy323;
yy322:
	YYCURSOR = YYMARKER;
	goto yy319;
yy323:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy322;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 436 "../src/parse/lex.re"
	{ return true; }
#line 1916 "src/parse/lex.cc"
}
#line 438 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 1925 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy329;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy329;
	}
#line 446 "../src/parse/lex.re"
	{ return false; }
#line 1974 "src/parse/lex.cc"
yy329:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy329;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy332;
	} else {
		if (yych <= '=') goto yy332;
		if (yych == '{') goto yy332;
	}
	YYCURSOR = yyt1;
#line 445 "../src/parse/lex.re"
	{ return true; }
#line 1991 "src/parse/lex.cc"
yy332:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 444 "../src/parse/lex.re"
	{ return false; }
#line 1997 "src/parse/lex.cc"
}
#line 447 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2008 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy334;
yy335:
	++YYCURSOR;
yy334:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy335;
	}
	if (yych <= 0x1F) goto yy337;
	if (yych <= '!') goto yy338;
	if (yych == '>') goto yy341;
yy337:
#line 457 "../src/parse/lex.re"
	{ goto cond; }
#line 2060 "src/parse/lex.cc"
yy338:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy338;
	if (yych == ' ') goto yy338;
#line 455 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2069 "src/parse/lex.cc"
yy341:
	++YYCURSOR;
#line 456 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2074 "src/parse/lex.cc"
}
#line 458 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2081 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy347;
		if (yych >= 'A') goto yy349;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy349;
		} else {
			if (yych <= '`') goto yy345;
			if (yych <= 'z') goto yy349;
		}
	}
yy345:
	++YYCURSOR;
#line 464 "../src/parse/lex.re"
	{ goto error; }
#line 2135 "src/parse/lex.cc"
yy347:
	++YYCURSOR;
#line 463 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2140 "src/parse/lex.cc"
yy349:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy349;
	}
#line 462 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2150 "src/parse/lex.cc"
}
#line 465 "../src/parse/lex.re"

next:

#line 2156 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy356;
		if (yych >= ' ') goto yy356;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy357;
		} else {
			if (yych == '>') goto yy360;
		}
	}
	++YYCURSOR;
yy355:
#line 470 "../src/parse/lex.re"
	{ goto error; }
#line 2209 "src/parse/lex.cc"
yy356:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy362;
		if (yych <= 0x1F) goto yy355;
		goto yy362;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy355;
		} else {
			if (yych == '>') goto yy360;
			goto yy355;
		}
	}
yy357:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy357;
	}
#line 468 "../src/parse/lex.re"
	{ goto cond; }
#line 2233 "src/parse/lex.cc"
yy360:
	++YYCURSOR;
#line 469 "../src/parse/lex.re"
	{ goto end; }
#line 2238 "src/parse/lex.cc"
yy362:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy362;
		if (yych >= ' ') goto yy362;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy357;
		} else {
			if (yych == '>') goto yy360;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy355;
}
#line 471 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.fatal(cur_loc(), "syntax error in condition list");
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 2272 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy367;
			if (yych == '\n') goto yy371;
			goto yy369;
		} else {
			if (yych <= '\r') goto yy373;
			if (yych == '"') goto yy374;
			goto yy369;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy374;
			if (yych == '/') goto yy376;
			goto yy369;
		} else {
			if (yych == '|') goto yy369;
			if (yych <= '}') goto yy377;
			goto yy369;
		}
	}
yy367:
	++YYCURSOR;
#line 496 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2302 "src/parse/lex.cc"
yy369:
	++YYCURSOR;
yy370:
#line 501 "../src/parse/lex.re"
	{ goto code; }
#line 2308 "src/parse/lex.cc"
yy371:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy372;
		if (yych <= '\n') goto yy379;
	} else {
		if (yych <= '\r') goto yy379;
		if (yych == ' ') goto yy379;
	}
yy372:
#line 487 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.code = new Code(loc, getstr(tok, p));
        return;
    }
#line 2328 "src/parse/lex.cc"
yy373:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy371;
	goto yy370;
yy374:
	++YYCURSOR;
#line 500 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2337 "src/parse/lex.cc"
yy376:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy381;
	if (yych == '/') goto yy383;
	goto yy370;
yy377:
	++YYCURSOR;
#line 497 "../src/parse/lex.re"
	{ msg.fatal(cur_loc(), "Curly braces are not allowed after ':='"); }
#line 2347 "src/parse/lex.cc"
yy379:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 486 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2353 "src/parse/lex.cc"
yy381:
	++YYCURSOR;
#line 498 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2358 "src/parse/lex.cc"
yy383:
	++YYCURSOR;
#line 499 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2363 "src/parse/lex.cc"
}
#line 502 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 2375 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy387;
			if (yych == '\n') goto yy391;
			goto yy389;
		} else {
			if (yych <= '\r') goto yy393;
			if (yych == '"') goto yy394;
			goto yy389;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy394;
			if (yych == '/') goto yy396;
			goto yy389;
		} else {
			if (yych <= '{') goto yy397;
			if (yych == '}') goto yy399;
			goto yy389;
		}
	}
yy387:
	++YYCURSOR;
#line 522 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2439 "src/parse/lex.cc"
yy389:
	++YYCURSOR;
yy390:
#line 526 "../src/parse/lex.re"
	{ goto code; }
#line 2445 "src/parse/lex.cc"
yy391:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy401;
	}
	if (yych == '#') goto yy404;
yy392:
#line 521 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2455 "src/parse/lex.cc"
yy393:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy391;
	goto yy390;
yy394:
	++YYCURSOR;
#line 525 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2464 "src/parse/lex.cc"
yy396:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy406;
	if (yych == '/') goto yy408;
	goto yy390;
yy397:
	++YYCURSOR;
#line 519 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 2474 "src/parse/lex.cc"
yy399:
	++YYCURSOR;
#line 511 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.code = new Code(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 2485 "src/parse/lex.cc"
yy401:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy401;
	}
	if (yych == '#') goto yy404;
yy403:
	YYCURSOR = YYMARKER;
	goto yy392;
yy404:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy404;
		goto yy403;
	} else {
		if (yych <= ' ') goto yy404;
		if (yych == 'l') goto yy410;
		goto yy403;
	}
yy406:
	++YYCURSOR;
#line 523 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2513 "src/parse/lex.cc"
yy408:
	++YYCURSOR;
#line 524 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2518 "src/parse/lex.cc"
yy410:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy403;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy403;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy403;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy415;
	if (yych <= '9') goto yy403;
	goto yy415;
yy414:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy415:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy414;
		goto yy403;
	} else {
		if (yych <= ' ') goto yy414;
		if (yych <= '0') goto yy403;
		if (yych >= ':') goto yy403;
		yyt1 = YYCURSOR;
	}
yy416:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy416;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy403;
		if (yych <= '\t') goto yy418;
		if (yych <= '\n') goto yy420;
		goto yy403;
	} else {
		if (yych <= '\r') goto yy422;
		if (yych != ' ') goto yy403;
	}
yy418:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy418;
		goto yy403;
	} else {
		if (yych <= ' ') goto yy418;
		if (yych == '"') goto yy423;
		goto yy403;
	}
yy420:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 520 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 2577 "src/parse/lex.cc"
yy422:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy420;
	goto yy403;
yy423:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy423;
	}
	if (yych <= '\n') goto yy403;
	if (yych >= '#') goto yy426;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy420;
	if (yych == '\r') goto yy422;
	goto yy403;
yy426:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy403;
	if (yych == '\n') goto yy403;
	goto yy423;
}
#line 527 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2611 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy429;
			if (yych <= '\t') goto yy431;
			goto yy433;
		} else {
			if (yych == '\r') goto yy435;
			goto yy431;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy436;
			if (yych <= '&') goto yy431;
			goto yy436;
		} else {
			if (yych == '\\') goto yy438;
			goto yy431;
		}
	}
yy429:
	++YYCURSOR;
#line 537 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2639 "src/parse/lex.cc"
yy431:
	++YYCURSOR;
yy432:
#line 538 "../src/parse/lex.re"
	{ goto loop; }
#line 2645 "src/parse/lex.cc"
yy433:
	++YYCURSOR;
#line 536 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 2650 "src/parse/lex.cc"
yy435:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy433;
	goto yy432;
yy436:
	++YYCURSOR;
#line 534 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 2659 "src/parse/lex.cc"
yy438:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy432;
	} else {
		if (yych <= '\'') goto yy439;
		if (yych != '\\') goto yy432;
	}
yy439:
	++YYCURSOR;
#line 535 "../src/parse/lex.re"
	{ goto loop; }
#line 2672 "src/parse/lex.cc"
}
#line 539 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 2682 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy443;
		if (yych == '\n') goto yy447;
		goto yy445;
	} else {
		if (yych <= '\r') goto yy449;
		if (yych == '*') goto yy450;
		goto yy445;
	}
yy443:
	++YYCURSOR;
#line 548 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2700 "src/parse/lex.cc"
yy445:
	++YYCURSOR;
yy446:
#line 549 "../src/parse/lex.re"
	{ goto loop; }
#line 2706 "src/parse/lex.cc"
yy447:
	++YYCURSOR;
#line 547 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 2711 "src/parse/lex.cc"
yy449:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy447;
	goto yy446;
yy450:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy446;
	++YYCURSOR;
#line 546 "../src/parse/lex.re"
	{ return; }
#line 2722 "src/parse/lex.cc"
}
#line 550 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 2732 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy455;
		if (yych <= '\t') goto yy457;
		goto yy459;
	} else {
		if (yych == '\r') goto yy461;
		goto yy457;
	}
yy455:
	++YYCURSOR;
#line 558 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2749 "src/parse/lex.cc"
yy457:
	++YYCURSOR;
yy458:
#line 559 "../src/parse/lex.re"
	{ goto loop; }
#line 2755 "src/parse/lex.cc"
yy459:
	++YYCURSOR;
#line 557 "../src/parse/lex.re"
	{ next_line(); return; }
#line 2760 "src/parse/lex.cc"
yy461:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy459;
	goto yy458;
}
#line 560 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 2779 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy465;
#line 573 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2787 "src/parse/lex.cc"
yy465:
	++YYCURSOR;
#line 572 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 2792 "src/parse/lex.cc"
}
#line 574 "../src/parse/lex.re"

snd:

#line 2798 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy470;
yy469:
#line 577 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2807 "src/parse/lex.cc"
yy470:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy472;
	YYCURSOR = YYMARKER;
	goto yy469;
yy472:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 578 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 2825 "src/parse/lex.cc"
}
#line 586 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 623 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 2843 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy476;
		if (yych == '\n') goto yy480;
		goto yy478;
	} else {
		if (yych <= '\r') goto yy482;
		if (yych == '\\') goto yy483;
		goto yy478;
	}
yy476:
	++YYCURSOR;
#line 604 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 2862 "src/parse/lex.cc"
yy478:
	++YYCURSOR;
yy479:
#line 606 "../src/parse/lex.re"
	{ return decode(tok); }
#line 2868 "src/parse/lex.cc"
yy480:
	++YYCURSOR;
#line 598 "../src/parse/lex.re"
	{ msg.fatal(loc, "newline in character class"); }
#line 2873 "src/parse/lex.cc"
yy482:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy480;
	goto yy479;
yy483:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy484;
				if (yych == '\n') goto yy480;
				goto yy485;
			} else {
				if (yych <= '\r') goto yy487;
				if (yych == '-') goto yy488;
				goto yy485;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy490;
				if (yych <= '7') goto yy492;
				if (yych <= 'T') goto yy485;
				goto yy493;
			} else {
				if (yych == 'X') goto yy495;
				if (yych <= '[') goto yy485;
				goto yy496;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy498;
				if (yych <= '`') goto yy485;
				if (yych <= 'a') goto yy500;
				goto yy502;
			} else {
				if (yych == 'f') goto yy504;
				if (yych <= 'm') goto yy485;
				goto yy506;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy508;
				if (yych <= 's') goto yy485;
				goto yy510;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy495;
					goto yy512;
				} else {
					if (yych == 'x') goto yy514;
					goto yy485;
				}
			}
		}
	}
yy484:
#line 601 "../src/parse/lex.re"
	{ msg.fatal(loc, "syntax error in escape sequence"); }
#line 2934 "src/parse/lex.cc"
yy485:
	++YYCURSOR;
yy486:
#line 619 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 2943 "src/parse/lex.cc"
yy487:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy480;
	goto yy486;
yy488:
	++YYCURSOR;
#line 617 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2952 "src/parse/lex.cc"
yy490:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy491;
	if (yych <= '7') goto yy515;
yy491:
#line 600 "../src/parse/lex.re"
	{ msg.fatal(loc, "syntax error in octal escape sequence"); }
#line 2961 "src/parse/lex.cc"
yy492:
	++YYCURSOR;
	goto yy491;
yy493:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy517;
	} else {
		if (yych <= 'F') goto yy517;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy517;
	}
yy494:
#line 599 "../src/parse/lex.re"
	{ msg.fatal(loc, "syntax error in hexadecimal escape sequence"); }
#line 2979 "src/parse/lex.cc"
yy495:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy518;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy518;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy518;
		goto yy494;
	}
yy496:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2997 "src/parse/lex.cc"
yy498:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3002 "src/parse/lex.cc"
yy500:
	++YYCURSOR;
#line 609 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3007 "src/parse/lex.cc"
yy502:
	++YYCURSOR;
#line 610 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3012 "src/parse/lex.cc"
yy504:
	++YYCURSOR;
#line 611 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3017 "src/parse/lex.cc"
yy506:
	++YYCURSOR;
#line 612 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3022 "src/parse/lex.cc"
yy508:
	++YYCURSOR;
#line 613 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3027 "src/parse/lex.cc"
yy510:
	++YYCURSOR;
#line 614 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3032 "src/parse/lex.cc"
yy512:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3037 "src/parse/lex.cc"
yy514:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy494;
		if (yych <= '9') goto yy519;
		goto yy494;
	} else {
		if (yych <= 'F') goto yy519;
		if (yych <= '`') goto yy494;
		if (yych <= 'f') goto yy519;
		goto yy494;
	}
yy515:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy516;
	if (yych <= '7') goto yy520;
yy516:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy491;
	} else {
		goto yy494;
	}
yy517:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy522;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy522;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy522;
		goto yy516;
	}
yy518:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy523;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy523;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy523;
		goto yy516;
	}
yy519:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy524;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy524;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy524;
		goto yy516;
	}
yy520:
	++YYCURSOR;
#line 608 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3102 "src/parse/lex.cc"
yy522:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy526;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy526;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy526;
		goto yy516;
	}
yy523:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy519;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy519;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy519;
		goto yy516;
	}
yy524:
	++YYCURSOR;
#line 607 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3131 "src/parse/lex.cc"
yy526:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych >= ':') goto yy516;
	} else {
		if (yych <= 'F') goto yy527;
		if (yych <= '`') goto yy516;
		if (yych >= 'g') goto yy516;
	}
yy527:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy518;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy518;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy518;
		goto yy516;
	}
}
#line 625 "../src/parse/lex.re"

    }
    else {
        
#line 3160 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy530;
			if (yych == '\n') goto yy534;
			goto yy532;
		} else {
			if (yych <= '\r') goto yy536;
			if (yych == '\\') goto yy537;
			goto yy532;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy539;
			if (yych <= 0xDF) goto yy541;
			if (yych <= 0xE0) goto yy542;
			goto yy543;
		} else {
			if (yych <= 0xF0) goto yy544;
			if (yych <= 0xF3) goto yy545;
			if (yych <= 0xF4) goto yy546;
			goto yy539;
		}
	}
yy530:
	++YYCURSOR;
#line 604 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3193 "src/parse/lex.cc"
yy532:
	++YYCURSOR;
yy533:
#line 606 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3199 "src/parse/lex.cc"
yy534:
	++YYCURSOR;
#line 598 "../src/parse/lex.re"
	{ msg.fatal(loc, "newline in character class"); }
#line 3204 "src/parse/lex.cc"
yy536:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy534;
	goto yy533;
yy537:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy547;
				} else {
					if (yych <= '\n') goto yy534;
					if (yych <= '\f') goto yy547;
					goto yy549;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy547;
					goto yy550;
				} else {
					if (yych <= '/') goto yy547;
					if (yych <= '3') goto yy552;
					goto yy554;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy547;
					goto yy555;
				} else {
					if (yych == 'X') goto yy557;
					goto yy547;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy558;
					goto yy560;
				} else {
					if (yych <= '`') goto yy547;
					if (yych <= 'a') goto yy562;
					goto yy564;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy547;
					goto yy566;
				} else {
					if (yych == 'n') goto yy568;
					goto yy547;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy570;
					goto yy547;
				} else {
					if (yych <= 't') goto yy572;
					if (yych <= 'u') goto yy557;
					goto yy574;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy547;
					goto yy576;
				} else {
					if (yych <= 0x7F) goto yy547;
					if (yych >= 0xC2) goto yy577;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy579;
					if (yych <= 0xEF) goto yy580;
					goto yy581;
				} else {
					if (yych <= 0xF3) goto yy582;
					if (yych <= 0xF4) goto yy583;
				}
			}
		}
	}
yy538:
#line 601 "../src/parse/lex.re"
	{ msg.fatal(loc, "syntax error in escape sequence"); }
#line 3296 "src/parse/lex.cc"
yy539:
	++YYCURSOR;
yy540:
#line 602 "../src/parse/lex.re"
	{ msg.fatal(loc, "syntax error"); }
#line 3302 "src/parse/lex.cc"
yy541:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy540;
	if (yych <= 0xBF) goto yy532;
	goto yy540;
yy542:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy540;
	if (yych <= 0xBF) goto yy584;
	goto yy540;
yy543:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy540;
	if (yych <= 0xBF) goto yy584;
	goto yy540;
yy544:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy540;
	if (yych <= 0xBF) goto yy585;
	goto yy540;
yy545:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy540;
	if (yych <= 0xBF) goto yy585;
	goto yy540;
yy546:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy540;
	if (yych <= 0x8F) goto yy585;
	goto yy540;
yy547:
	++YYCURSOR;
yy548:
#line 619 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3346 "src/parse/lex.cc"
yy549:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy534;
	goto yy548;
yy550:
	++YYCURSOR;
#line 617 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3355 "src/parse/lex.cc"
yy552:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy553;
	if (yych <= '7') goto yy586;
yy553:
#line 600 "../src/parse/lex.re"
	{ msg.fatal(loc, "syntax error in octal escape sequence"); }
#line 3364 "src/parse/lex.cc"
yy554:
	++YYCURSOR;
	goto yy553;
yy555:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy556;
		if (yych <= '9') goto yy587;
	} else {
		if (yych <= 'F') goto yy587;
		if (yych <= '`') goto yy556;
		if (yych <= 'f') goto yy587;
	}
yy556:
#line 599 "../src/parse/lex.re"
	{ msg.fatal(loc, "syntax error in hexadecimal escape sequence"); }
#line 3382 "src/parse/lex.cc"
yy557:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy556;
		if (yych <= '9') goto yy588;
		goto yy556;
	} else {
		if (yych <= 'F') goto yy588;
		if (yych <= '`') goto yy556;
		if (yych <= 'f') goto yy588;
		goto yy556;
	}
yy558:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3400 "src/parse/lex.cc"
yy560:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3405 "src/parse/lex.cc"
yy562:
	++YYCURSOR;
#line 609 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3410 "src/parse/lex.cc"
yy564:
	++YYCURSOR;
#line 610 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3415 "src/parse/lex.cc"
yy566:
	++YYCURSOR;
#line 611 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3420 "src/parse/lex.cc"
yy568:
	++YYCURSOR;
#line 612 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3425 "src/parse/lex.cc"
yy570:
	++YYCURSOR;
#line 613 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3430 "src/parse/lex.cc"
yy572:
	++YYCURSOR;
#line 614 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3435 "src/parse/lex.cc"
yy574:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3440 "src/parse/lex.cc"
yy576:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy556;
		if (yych <= '9') goto yy589;
		goto yy556;
	} else {
		if (yych <= 'F') goto yy589;
		if (yych <= '`') goto yy556;
		if (yych <= 'f') goto yy589;
		goto yy556;
	}
yy577:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0xBF) goto yy547;
yy578:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy538;
		} else {
			goto yy540;
		}
	} else {
		if (yyaccept == 2) {
			goto yy553;
		} else {
			goto yy556;
		}
	}
yy579:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy578;
	if (yych <= 0xBF) goto yy577;
	goto yy578;
yy580:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0xBF) goto yy577;
	goto yy578;
yy581:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy578;
	if (yych <= 0xBF) goto yy580;
	goto yy578;
yy582:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0xBF) goto yy580;
	goto yy578;
yy583:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0x8F) goto yy580;
	goto yy578;
yy584:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0xBF) goto yy532;
	goto yy578;
yy585:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0xBF) goto yy584;
	goto yy578;
yy586:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy578;
	if (yych <= '7') goto yy590;
	goto yy578;
yy587:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy578;
		if (yych <= '9') goto yy592;
		goto yy578;
	} else {
		if (yych <= 'F') goto yy592;
		if (yych <= '`') goto yy578;
		if (yych <= 'f') goto yy592;
		goto yy578;
	}
yy588:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy578;
		if (yych <= '9') goto yy593;
		goto yy578;
	} else {
		if (yych <= 'F') goto yy593;
		if (yych <= '`') goto yy578;
		if (yych <= 'f') goto yy593;
		goto yy578;
	}
yy589:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy578;
		if (yych <= '9') goto yy594;
		goto yy578;
	} else {
		if (yych <= 'F') goto yy594;
		if (yych <= '`') goto yy578;
		if (yych <= 'f') goto yy594;
		goto yy578;
	}
yy590:
	++YYCURSOR;
#line 608 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3553 "src/parse/lex.cc"
yy592:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy578;
		if (yych <= '9') goto yy596;
		goto yy578;
	} else {
		if (yych <= 'F') goto yy596;
		if (yych <= '`') goto yy578;
		if (yych <= 'f') goto yy596;
		goto yy578;
	}
yy593:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy578;
		if (yych <= '9') goto yy589;
		goto yy578;
	} else {
		if (yych <= 'F') goto yy589;
		if (yych <= '`') goto yy578;
		if (yych <= 'f') goto yy589;
		goto yy578;
	}
yy594:
	++YYCURSOR;
#line 607 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3582 "src/parse/lex.cc"
yy596:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy578;
		if (yych >= ':') goto yy578;
	} else {
		if (yych <= 'F') goto yy597;
		if (yych <= '`') goto yy578;
		if (yych >= 'g') goto yy578;
	}
yy597:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy578;
		if (yych <= '9') goto yy588;
		goto yy578;
	} else {
		if (yych <= 'F') goto yy588;
		if (yych <= '`') goto yy578;
		if (yych <= 'f') goto yy588;
		goto yy578;
	}
}
#line 628 "../src/parse/lex.re"
 #line 628 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 662 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3621 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy600;
		if (yych == '\n') goto yy604;
		goto yy602;
	} else {
		if (yych <= '\r') goto yy606;
		if (yych == '\\') goto yy607;
		goto yy602;
	}
yy600:
	++YYCURSOR;
#line 644 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 3640 "src/parse/lex.cc"
yy602:
	++YYCURSOR;
yy603:
#line 646 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 3646 "src/parse/lex.cc"
yy604:
	++YYCURSOR;
#line 638 "../src/parse/lex.re"
	{ msg.fatal(ast.loc, "newline in character string"); }
#line 3651 "src/parse/lex.cc"
yy606:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy604;
	goto yy603;
yy607:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy608;
				if (yych <= '\t') goto yy609;
				goto yy604;
			} else {
				if (yych == '\r') goto yy611;
				if (yych <= '/') goto yy609;
				goto yy612;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy614;
				if (yych == 'U') goto yy615;
				goto yy609;
			} else {
				if (yych <= 'X') goto yy617;
				if (yych == '\\') goto yy618;
				goto yy609;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy620;
				if (yych <= 'b') goto yy622;
				goto yy609;
			} else {
				if (yych <= 'f') goto yy624;
				if (yych == 'n') goto yy626;
				goto yy609;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy628;
				if (yych <= 's') goto yy609;
				if (yych <= 't') goto yy630;
				goto yy617;
			} else {
				if (yych <= 'v') goto yy632;
				if (yych == 'x') goto yy634;
				goto yy609;
			}
		}
	}
yy608:
#line 641 "../src/parse/lex.re"
	{ msg.fatal(ast.loc, "syntax error in escape sequence"); }
#line 3707 "src/parse/lex.cc"
yy609:
	++YYCURSOR;
yy610:
#line 657 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 3717 "src/parse/lex.cc"
yy611:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy604;
	goto yy610;
yy612:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy613;
	if (yych <= '7') goto yy635;
yy613:
#line 640 "../src/parse/lex.re"
	{ msg.fatal(ast.loc, "syntax error in octal escape sequence"); }
#line 3730 "src/parse/lex.cc"
yy614:
	++YYCURSOR;
	goto yy613;
yy615:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych <= '9') goto yy637;
	} else {
		if (yych <= 'F') goto yy637;
		if (yych <= '`') goto yy616;
		if (yych <= 'f') goto yy637;
	}
yy616:
#line 639 "../src/parse/lex.re"
	{ msg.fatal(ast.loc, "syntax error in hexadecimal escape sequence"); }
#line 3748 "src/parse/lex.cc"
yy617:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych <= '9') goto yy638;
		goto yy616;
	} else {
		if (yych <= 'F') goto yy638;
		if (yych <= '`') goto yy616;
		if (yych <= 'f') goto yy638;
		goto yy616;
	}
yy618:
	++YYCURSOR;
#line 656 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 3766 "src/parse/lex.cc"
yy620:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 3771 "src/parse/lex.cc"
yy622:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 3776 "src/parse/lex.cc"
yy624:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 3781 "src/parse/lex.cc"
yy626:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 3786 "src/parse/lex.cc"
yy628:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 3791 "src/parse/lex.cc"
yy630:
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 3796 "src/parse/lex.cc"
yy632:
	++YYCURSOR;
#line 655 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 3801 "src/parse/lex.cc"
yy634:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych <= '9') goto yy639;
		goto yy616;
	} else {
		if (yych <= 'F') goto yy639;
		if (yych <= '`') goto yy616;
		if (yych <= 'f') goto yy639;
		goto yy616;
	}
yy635:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy636;
	if (yych <= '7') goto yy640;
yy636:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy613;
	} else {
		goto yy616;
	}
yy637:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy636;
		if (yych <= '9') goto yy642;
		goto yy636;
	} else {
		if (yych <= 'F') goto yy642;
		if (yych <= '`') goto yy636;
		if (yych <= 'f') goto yy642;
		goto yy636;
	}
yy638:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy636;
		if (yych <= '9') goto yy643;
		goto yy636;
	} else {
		if (yych <= 'F') goto yy643;
		if (yych <= '`') goto yy636;
		if (yych <= 'f') goto yy643;
		goto yy636;
	}
yy639:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy636;
		if (yych <= '9') goto yy644;
		goto yy636;
	} else {
		if (yych <= 'F') goto yy644;
		if (yych <= '`') goto yy636;
		if (yych <= 'f') goto yy644;
		goto yy636;
	}
yy640:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 3866 "src/parse/lex.cc"
yy642:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy636;
		if (yych <= '9') goto yy646;
		goto yy636;
	} else {
		if (yych <= 'F') goto yy646;
		if (yych <= '`') goto yy636;
		if (yych <= 'f') goto yy646;
		goto yy636;
	}
yy643:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy636;
		if (yych <= '9') goto yy639;
		goto yy636;
	} else {
		if (yych <= 'F') goto yy639;
		if (yych <= '`') goto yy636;
		if (yych <= 'f') goto yy639;
		goto yy636;
	}
yy644:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 3895 "src/parse/lex.cc"
yy646:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy636;
		if (yych >= ':') goto yy636;
	} else {
		if (yych <= 'F') goto yy647;
		if (yych <= '`') goto yy636;
		if (yych >= 'g') goto yy636;
	}
yy647:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy636;
		if (yych <= '9') goto yy638;
		goto yy636;
	} else {
		if (yych <= 'F') goto yy638;
		if (yych <= '`') goto yy636;
		if (yych <= 'f') goto yy638;
		goto yy636;
	}
}
#line 664 "../src/parse/lex.re"

    }
    else {
        
#line 3924 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy650;
			if (yych == '\n') goto yy654;
			goto yy652;
		} else {
			if (yych <= '\r') goto yy656;
			if (yych == '\\') goto yy657;
			goto yy652;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy659;
			if (yych <= 0xDF) goto yy661;
			if (yych <= 0xE0) goto yy662;
			goto yy663;
		} else {
			if (yych <= 0xF0) goto yy664;
			if (yych <= 0xF3) goto yy665;
			if (yych <= 0xF4) goto yy666;
			goto yy659;
		}
	}
yy650:
	++YYCURSOR;
#line 644 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 3957 "src/parse/lex.cc"
yy652:
	++YYCURSOR;
yy653:
#line 646 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 3963 "src/parse/lex.cc"
yy654:
	++YYCURSOR;
#line 638 "../src/parse/lex.re"
	{ msg.fatal(ast.loc, "newline in character string"); }
#line 3968 "src/parse/lex.cc"
yy656:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy654;
	goto yy653;
yy657:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy658;
				if (yych == '\n') goto yy654;
				goto yy667;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy669;
					goto yy667;
				} else {
					if (yych <= '3') goto yy670;
					if (yych <= '7') goto yy672;
					goto yy667;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy673;
					goto yy667;
				} else {
					if (yych <= 'X') goto yy675;
					if (yych <= '[') goto yy667;
					goto yy676;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy667;
					goto yy678;
				} else {
					if (yych <= 'b') goto yy680;
					if (yych <= 'e') goto yy667;
					goto yy682;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy684;
				if (yych <= 'q') goto yy667;
				goto yy686;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy667;
					goto yy688;
				} else {
					if (yych <= 'u') goto yy675;
					if (yych <= 'v') goto yy690;
					goto yy667;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy692;
					goto yy667;
				} else {
					if (yych <= 0xC1) goto yy658;
					if (yych <= 0xDF) goto yy693;
					goto yy695;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy696;
					goto yy697;
				} else {
					if (yych <= 0xF3) goto yy698;
					if (yych <= 0xF4) goto yy699;
				}
			}
		}
	}
yy658:
#line 641 "../src/parse/lex.re"
	{ msg.fatal(ast.loc, "syntax error in escape sequence"); }
#line 4053 "src/parse/lex.cc"
yy659:
	++YYCURSOR;
yy660:
#line 642 "../src/parse/lex.re"
	{ msg.fatal(ast.loc, "syntax error"); }
#line 4059 "src/parse/lex.cc"
yy661:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy660;
	if (yych <= 0xBF) goto yy652;
	goto yy660;
yy662:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy660;
	if (yych <= 0xBF) goto yy700;
	goto yy660;
yy663:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy660;
	if (yych <= 0xBF) goto yy700;
	goto yy660;
yy664:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy660;
	if (yych <= 0xBF) goto yy701;
	goto yy660;
yy665:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy660;
	if (yych <= 0xBF) goto yy701;
	goto yy660;
yy666:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy660;
	if (yych <= 0x8F) goto yy701;
	goto yy660;
yy667:
	++YYCURSOR;
yy668:
#line 657 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4104 "src/parse/lex.cc"
yy669:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy654;
	goto yy668;
yy670:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy671;
	if (yych <= '7') goto yy702;
yy671:
#line 640 "../src/parse/lex.re"
	{ msg.fatal(ast.loc, "syntax error in octal escape sequence"); }
#line 4117 "src/parse/lex.cc"
yy672:
	++YYCURSOR;
	goto yy671;
yy673:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy703;
	} else {
		if (yych <= 'F') goto yy703;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy703;
	}
yy674:
#line 639 "../src/parse/lex.re"
	{ msg.fatal(ast.loc, "syntax error in hexadecimal escape sequence"); }
#line 4135 "src/parse/lex.cc"
yy675:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy704;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy704;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy704;
		goto yy674;
	}
yy676:
	++YYCURSOR;
#line 656 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4153 "src/parse/lex.cc"
yy678:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4158 "src/parse/lex.cc"
yy680:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4163 "src/parse/lex.cc"
yy682:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4168 "src/parse/lex.cc"
yy684:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4173 "src/parse/lex.cc"
yy686:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4178 "src/parse/lex.cc"
yy688:
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4183 "src/parse/lex.cc"
yy690:
	++YYCURSOR;
#line 655 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4188 "src/parse/lex.cc"
yy692:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy705;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy705;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy705;
		goto yy674;
	}
yy693:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy694;
	if (yych <= 0xBF) goto yy667;
yy694:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy658;
		} else {
			goto yy660;
		}
	} else {
		if (yyaccept == 2) {
			goto yy671;
		} else {
			goto yy674;
		}
	}
yy695:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy694;
	if (yych <= 0xBF) goto yy693;
	goto yy694;
yy696:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy694;
	if (yych <= 0xBF) goto yy693;
	goto yy694;
yy697:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy694;
	if (yych <= 0xBF) goto yy696;
	goto yy694;
yy698:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy694;
	if (yych <= 0xBF) goto yy696;
	goto yy694;
yy699:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy694;
	if (yych <= 0x8F) goto yy696;
	goto yy694;
yy700:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy694;
	if (yych <= 0xBF) goto yy652;
	goto yy694;
yy701:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy694;
	if (yych <= 0xBF) goto yy700;
	goto yy694;
yy702:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy694;
	if (yych <= '7') goto yy706;
	goto yy694;
yy703:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy694;
		if (yych <= '9') goto yy708;
		goto yy694;
	} else {
		if (yych <= 'F') goto yy708;
		if (yych <= '`') goto yy694;
		if (yych <= 'f') goto yy708;
		goto yy694;
	}
yy704:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy694;
		if (yych <= '9') goto yy709;
		goto yy694;
	} else {
		if (yych <= 'F') goto yy709;
		if (yych <= '`') goto yy694;
		if (yych <= 'f') goto yy709;
		goto yy694;
	}
yy705:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy694;
		if (yych <= '9') goto yy710;
		goto yy694;
	} else {
		if (yych <= 'F') goto yy710;
		if (yych <= '`') goto yy694;
		if (yych <= 'f') goto yy710;
		goto yy694;
	}
yy706:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4301 "src/parse/lex.cc"
yy708:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy694;
		if (yych <= '9') goto yy712;
		goto yy694;
	} else {
		if (yych <= 'F') goto yy712;
		if (yych <= '`') goto yy694;
		if (yych <= 'f') goto yy712;
		goto yy694;
	}
yy709:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy694;
		if (yych <= '9') goto yy705;
		goto yy694;
	} else {
		if (yych <= 'F') goto yy705;
		if (yych <= '`') goto yy694;
		if (yych <= 'f') goto yy705;
		goto yy694;
	}
yy710:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4330 "src/parse/lex.cc"
yy712:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy694;
		if (yych >= ':') goto yy694;
	} else {
		if (yych <= 'F') goto yy713;
		if (yych <= '`') goto yy694;
		if (yych >= 'g') goto yy694;
	}
yy713:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy694;
		if (yych <= '9') goto yy704;
		goto yy694;
	} else {
		if (yych <= 'F') goto yy704;
		if (yych <= '`') goto yy694;
		if (yych <= 'f') goto yy704;
		goto yy694;
	}
}
#line 667 "../src/parse/lex.re"
 #line 667 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 4378 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy718;
		} else {
			if (yych <= '\n') goto yy720;
			if (yych <= '\f') goto yy718;
			goto yy722;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy718;
			goto yy723;
		} else {
			if (yych <= '0') goto yy718;
			if (yych <= '9') goto yy724;
			goto yy718;
		}
	}
	++YYCURSOR;
#line 709 "../src/parse/lex.re"
	{ --cur; return; }
#line 4438 "src/parse/lex.cc"
yy718:
	++YYCURSOR;
yy719:
#line 710 "../src/parse/lex.re"
	{ goto sourceline; }
#line 4444 "src/parse/lex.cc"
yy720:
	++YYCURSOR;
#line 708 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 4449 "src/parse/lex.cc"
yy722:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy720;
	goto yy719;
yy723:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy719;
	if (yych == '\n') goto yy719;
	goto yy728;
yy724:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy724;
	}
#line 689 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.fatal(tok_loc(), "line number overflow");
        }
        set_line(l);
        goto sourceline;
    }
#line 4475 "src/parse/lex.cc"
yy727:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy728:
	if (yybm[0+yych] & 128) {
		goto yy727;
	}
	if (yych <= '\n') goto yy729;
	if (yych <= '"') goto yy730;
	goto yy732;
yy729:
	YYCURSOR = YYMARKER;
	goto yy719;
yy730:
	++YYCURSOR;
#line 698 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = getstr(tok + 1, cur - 1);
        strrreplace(name, "\\", "\\\\");
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 4502 "src/parse/lex.cc"
yy732:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy729;
	if (yych == '\n') goto yy729;
	goto yy727;
}
#line 711 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.fatal(cur_loc(), "unexpected end of input");
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
